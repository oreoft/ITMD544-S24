extends layout

block content
    style.
        .input-mask {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 0.375rem; /* 6px */
            cursor: not-allowed;
        }

        .toast {
            visibility: hidden; /* 默认不显示 */
            min-width: 250px;
            margin-left: -125px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 2px;
            padding: 16px;
            position: fixed;
            z-index: 1;
            left: 50%;
            bottom: 30px;
            font-size: 17px;
            transition: visibility 0s, opacity 0.5s linear;
        }

        .toast.show {
            visibility: visible;
            opacity: 1;
        }

        .loading-spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #09f;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }

        .hidden {
            display: none;
        }
    div#toast(class="toast")
    div.flex.items-center.justify-center.min-h-screen.bg-gray-100
        .container.relative.max-w-2xl.bg-white.rounded-lg.shadow-lg.p-6
            // User nicknames are placed separately at the top center
            div.relative.flex.justify-between.items-center
                span.text-xl.font-semibold #{userName}
                button#userMenuButton(class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline") Menu
            // Drop-down menus fit snugly on Menu buttons
            div#userMenu(class="hidden absolute right-0 mt-1 bg-white rounded-md shadow-xl z-10")
                a(href="#" id="check-in-link" class="block px-4 py-2 text-sm text-yellow-500 hover:bg-yellow-100") Check In
                a(href="/edit-username" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100") Edit Username
                a(href="#" id="logout-link" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100") Logout
                a(href="#" id="delete-account-link" class="block px-4 py-2 text-sm text-red-500 hover:bg-red-100") Delete Account
            // chat container
            .chat-container.flex.flex-col.space-y-4.p-3.h-96.w-82.overflow-y-auto.mt-4
                div.flex.items-center
                    .avatar.bg-blue-500.text-white.font-bold.rounded-full.h-8.w-8.flex.items-center.justify-center.mr-2 AI
                    .chat-message.robot.text-gray-800.text-left.p-2.rounded-lg.bg-gray-50.break-words.max-w-md.ml-2 #{initContent}
            form.chat-form.mt-4.flex.relative
                .input-wrapper.relative.flex-1
                    input(type="text" placeholder="Type the garbage you want to classify..." class="w-full border border-gray-300 py-2 px-4 rounded-lg focus:outline-none")
                    .input-mask.hidden
                        .loading-spinner
                button(type="submit" class="bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-lg shadow transition duration-150 ease-in-out hover:shadow-lg") Send
    div#editUsernameModal(class="hidden absolute top-0 left-0 w-full h-full flex items-center justify-center bg-gray-500 bg-opacity-50")
        .modal-content.bg-white.w-13.p-5.rounded-lg
            h2.text-lg.font-semibold Edit Username
            form#editUsernameForm
                input#newUsername(type="text" placeholder=userName class="border border-gray-300 p-2 rounded w-full")
                button(type="submit" class="mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline") Confirm


    script.
        document.addEventListener('DOMContentLoaded', () => {
            const userMenuButton = document.querySelector('#userMenuButton');
            const userMenu = document.querySelector('#userMenu');

            userMenuButton.addEventListener('click', () => {
                userMenu.classList.toggle('hidden');
            });

            const form = document.querySelector('.chat-form');
            const input = form.querySelector('input');
            const chatContainer = document.querySelector('.chat-container');
            const inputMask = form.querySelector('.input-mask'); // 输入框的遮罩层

            form.addEventListener('submit', function (e) {
                e.preventDefault();
                const message = input.value.trim();
                if (message) {
                    // Show Mask Layer
                    inputMask.classList.remove('hidden');
                    input.disabled = true; // Disable input box
                    // Creating containers with user messages and avatars
                    const userMessageContainer = document.createElement('div');
                    userMessageContainer.className = 'flex items-center justify-end mb-2';
                    // Display user messages
                    const userMessageDiv = document.createElement('div');
                    userMessageDiv.textContent = message;
                    userMessageDiv.className = 'chat-message user text-white text-right p-2 rounded-lg bg-blue-500 break-words max-w-xs mr-2';
                    // Creating user avatar elements
                    const userAvatarDiv = document.createElement('div');
                    userAvatarDiv.className = 'avatar bg-gray-50 border border-gray-300 text-gray-800 font-bold rounded-full h-8 w-8 flex items-center justify-center ml-2 text-xs';
                    userAvatarDiv.textContent = 'YOU';
                    userMessageContainer.appendChild(userMessageDiv);
                    userMessageContainer.appendChild(userAvatarDiv);
                    chatContainer.appendChild(userMessageContainer);

                    // Empty the input box
                    input.value = '';

                    // Constructing request parameters
                    const queryParams = new URLSearchParams({content: message});
                    let result = "Sorry, it's crowded ahead. Please try again later."
                    // Send request to `/qa` interface
                    fetch(`/qa/do?${queryParams}`, {
                        method: 'GET', // 根据接口要求选择合适的方法
                        credentials: 'include', // 如果API需要cookies，例如身份验证
                    }).then(response => response.json()).then(data => {
                        console.log("fetch qa result", data)
                        if (data.code === 0 && data.data) {
                            result = data.data
                        } else {
                            // Processing errors or no data
                            console.error('Failed to get response or empty data returned', data);
                        }
                    }).finally(error => {
                        // Failure to process a request
                        console.error('Error fetching the QA response:', error);
                        // Create containers with AI answers and avatars
                        const aiResponseContainer = document.createElement('div');
                        aiResponseContainer.className = 'flex items-center mb-2';
                        // Show AI Answers
                        const aiResponseDiv = document.createElement('div');
                        aiResponseDiv.innerHTML = result.replace(/\n/g, '<br>');
                        aiResponseDiv.className = 'chat-message robot text-gray-800 text-left p-2 rounded-lg bg-gray-50 break-words max-w-md ml-2';
                        // Creating AI avatar elements
                        const aiAvatarDiv = document.createElement('div');
                        aiAvatarDiv.className = 'avatar bg-blue-500 text-white font-bold rounded-full h-8 w-8 flex items-center justify-center mr-2';
                        aiAvatarDiv.textContent = 'AI';
                        aiResponseContainer.appendChild(aiAvatarDiv);
                        aiResponseContainer.appendChild(aiResponseDiv);
                        chatContainer.appendChild(aiResponseContainer);
                        // Scroll to the bottom
                        chatContainer.scrollTop = chatContainer.scrollHeight;
                        inputMask.classList.add('hidden');
                        input.disabled = false;
                    });
                }
            });

            // 显示Toast通知的函数
            function showToast(message) {
                const toast = document.getElementById("toast");
                toast.textContent = message;
                toast.className = "toast show";
                setTimeout(() => {
                    toast.className = toast.className.replace("show", "");
                }, 3000);
            }

            // 处理/logout链接的点击事件
            document.getElementById('logout-link').addEventListener('click', function (e) {
                e.preventDefault();
                fetch('/users/logout', {
                    method: 'POST',
                    credentials: 'include',
                }).then(response => response.json())
                    .then(data => {
                        showToast(data.message);
                        if (data.code === 0) {
                            setTimeout(() => {
                                window.location.href = '/';
                            }, 500);
                        }
                    }).catch(error => {
                    console.error('Logout failed:', error);
                    showToast('Logout failed');
                });
            });

            // 处理/delete链接的点击事件
            document.getElementById('delete-account-link').addEventListener('click', function (e) {
                e.preventDefault();
                fetch('/users/delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                })
                    .then(response => response.json())
                    .then(data => {
                        showToast(data.message);
                        if (data.code === 0) {
                            setTimeout(() => {
                                window.location.href = '/';
                            }, 500);
                        }
                    }).catch(error => {
                    console.error('Delete account failed:', error);
                    showToast('Delete account failed');
                });
            });
            const editUsernameLink = document.querySelector('a[href="/edit-username"]');
            const editUsernameModal = document.getElementById('editUsernameModal');
            // Show Edit Nickname Modal Box
            editUsernameLink.addEventListener('click', (e) => {
                e.preventDefault();
                editUsernameModal.classList.remove('hidden');
            });

            // Click outside the modal box to close the modal box
            editUsernameModal.addEventListener('click', (e) => {
                if (e.target === editUsernameModal) {
                    editUsernameModal.classList.add('hidden');
                }
            });
            const editUsernameForm = document.getElementById('editUsernameForm');
            const newUsernameInput = document.getElementById('newUsername');

            editUsernameForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const newUsername = newUsernameInput.value.trim();

                if (newUsername) {
                    fetch('/users/edit-username', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        credentials: 'include',
                        body: JSON.stringify({username: newUsername}),
                    })
                        .then(response => response.json())
                        .then(data => {
                            showToast(data.message);
                            editUsernameModal.classList.add('hidden');
                            newUsernameInput.value = ''; // 清空输入框
                            if (data.code === 0) {
                                setTimeout(() => {
                                    window.location.reload()
                                }, 500);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            showToast('Failed to update username');
                        });
                }
            });
            document.getElementById('check-in-link').addEventListener('click', function (e) {
                e.preventDefault();
                fetch('/qa/check-in', {
                    method: 'POST',
                    credentials: 'include'
                })
                    .then(response => response.json())
                    .then(data => {
                        showToast(data.message)
                    })
                    .catch(error => console.error('Error:', error));
            });
        });


